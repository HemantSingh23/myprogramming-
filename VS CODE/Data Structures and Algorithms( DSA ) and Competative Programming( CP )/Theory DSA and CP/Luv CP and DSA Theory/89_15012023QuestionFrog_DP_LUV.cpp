




//
//
/* 
// //  Atcoder Question ==>   


// Questions Link =>
https://atcoder.jp/contests/dp/tasks


// 1. frog 1 =>
https://atcoder.jp/contests/dp/tasks/dp_a


// 2. frog 2  =>
https://atcoder.jp/contests/dp/tasks/dp_b



// Video Link =>
https://www.youtube.com/watch?v=mnuBvHbMNJM&list=PLauivoElc3ggagradg8MfOZreCMmXMmJ-&index=105



*/




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
// 1. frog 1 =>
// https://atcoder.jp/contests/dp/tasks/dp_a
//
//

// #include<bits/stdc++.h>
// using namespace std;

// const int N = 1e5+10 ;

// int h[N] ;
// int dp[N] ;

// int func(int i )
// {
//     if(i==0) return 0;

//     if(dp[i] != -1) return dp[i] ;

//     int cost = INT_MAX;

//     // way 1
//     cost = min(cost, func(i-1)+ abs(h[i] - h[i-1]) ) ;

//     // way 2
//     if(i>1) cost = min(cost, func(i-2)+ abs(h[i] - h[i-2]) ) ;

//     return dp[i] = cost ;

// }


// int main()
// {
//     memset(dp, -1, sizeof(dp)) ;

//     int n ;    cin>>n;
//     for(int i =0; i<n; i++)
//     {
//         cin>>h[i] ;
//     }
//     cout<<func(n-1)<<endl; ;
// }











//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
// 2. frog 2  =>
// https://atcoder.jp/contests/dp/tasks/dp_b
//
//
// Time Complexity == O(N*K)
//


#include<bits/stdc++.h>
using namespace std;

const int N = 1e5+10 ;
int k;

int h[N] ;
int dp[N] ;

int func(int i )
{
    if(i==0) return 0;

    if(dp[i] != -1) return dp[i] ;

    int cost = INT_MAX;

    for(int j =1; j<=k; j++)
    {
        if(i-j>=0) cost = min(cost, func(i-j)+ abs(h[i] - h[i-j]) ) ;
    }

    return dp[i] = cost ;

}


int main()
{
    memset(dp, -1, sizeof(dp)) ;

    int n ;    cin>>n>>k;
    for(int i =0; i<n; i++)
    {
        cin>>h[i] ;
    }
    cout<<func(n-1)<<endl; ;

}

































