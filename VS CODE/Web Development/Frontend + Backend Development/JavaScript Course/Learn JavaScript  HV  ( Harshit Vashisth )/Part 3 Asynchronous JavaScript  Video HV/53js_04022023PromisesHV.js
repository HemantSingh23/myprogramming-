

// connect the html file 47js_02022023

console.log("53js ");


// // // // //  promises ===>
//
// it represents future value
// it works asynchrounously 
// it is a feature of browser not  javaScript
// because we can clearly see that "Script Start " and 
// "Script End" will print then promises will print because
// when promises comes javascript give it to browser and 
// javascript next part then at last browser promises will print
//

// // /// /// // then method ==>
// 
// below we will use then method and
// then always return the promise means we can create a chain 
// of promise



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// lets understand with an example =>

// we want to make fried rice which required vegetable, salt and rice
//  
// means here we have promised for making fried rice
//

// const bucket = ['coffee', 'chips','vegetables','salt','rice'] ;
// now if we have a promise of making fried rice then 
//
// // // initial state ==>
// promise : fried rice
// status : pending
// value : undefined
// 
//
//  // //  final state ==>
// promise : fried rice
// status : fullfilled
// value : fried rice or any otherthing which we want 



// const bucket1 = ['coffee', 'chips','vegetables','rice'] ;
// now if we have a promise of making fried rice then 
//
// // // initial state ==>
// promise : fried rice
// status : pending
// value : undefined
// 
//
//  // //  final state ==>
// promise : fried rice
// status : reject
// value : could not make the fried rice




// console.log("Script Start") ;

// // // // // // when everything is present in the bucket

// // // create or produce  the promises ==>

// const bucket = ['coffee', 'chips','vegetables','salt','rice'] ;
// const friedRicePromise =  new Promise( (resolve, reject) =>{
//     if(bucket.includes("vegetables") && bucket.includes("salt") && bucket.includes("rice") )
//     {
//         resolve("Fried Rice");
//     }
//     else reject("Something missing from bucket");
// })


// // // // consume the promises  ==>

// friedRicePromise.then(
//     // // //  when promise will be resolve
//     (myfriedRice)=>{
//         console.log("lets Eat", myfriedRice) ;
//     }
// );
// here then take a callback function as an input  which
// take the value which will come after resolve 
// here that value is "Fried Rice" which we received in myfriedRice


// // // or 

// friedRicePromise.then( (myfriedRice)=>{
//     console.log("lets Eat", myfriedRice) ;
// } );


// //  in the above, if from bucket we remove salt then the above
// // code will give error because reject condition will execute
// // and there is no callback function in then 
//
// see below => 





// // // // // // when somthing is not present in the bucket

// // create or produce  the promises ==>

// const bucket1 = ['coffee', 'chips','vegetables','rice'] ;

// const friedRicePromise1 =  new Promise( (resolve, reject) =>{
//     if(bucket1.includes("vegetables") && bucket1.includes("salt") && bucket1.includes("rice") )
//     {
//         resolve("Fried Rice");
//     }
//     else reject("Something missing from bucket");
// }) ;

// // // consume the promises  ==>

// friedRicePromise1.then(
//     // // //  when promise will be resolve
//     (myfriedRice)=>{
//         console.log("lets Eat", myfriedRice) ;
//     }, 
//     // //  when promise will be reject
//     (error)=>{ 
//     console.log(error)
//     } 
// );
// here if we not use the 2nd callback function(in which error
// is written ) in then  so the code will give error becuase 
// in bucket one thing is missing so reject will execute and
// but there will be no 2nd callback function  in then 


// // // or 

// friedRicePromise1.then(
//     // // //  when promise will be resolve // but because here
//     null,  // promise is reject so we can use null

//     // //  when promise will be reject
//     (error)=>{ 
//     console.log(error)
//     } 
// );

// // // or 

// friedRicePromise1.then( (myfriedRice)=>{
//     console.log("lets Eat", myfriedRice) ;
// }, (error)=>{ console.log(error)}    );

 
// // // or
 
// // if we don't want to pass two callback() function so we can also
// // use catch which will do chaining with then
//
// friedRicePromise1.then(
//     // // //  when promise will be resolve
//     (myfriedRice)=>{
//         console.log("lets Eat", myfriedRice) ;
//     }).catch( 
//     // // //  when promise will be reject
//     (error)=>{ 
//         console.log(error) ;
// } );                           

 




// console.log("Script End") ;

 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// // // // // function returning promises ===>
// // // // // function returning promises ===>
// // // // // function returning promises ===>
// // // // // function returning promises ===>

// function ricePromises()
// {
//     const bucket2 = ['coffee', 'chips','vegetables','salt','rice'] ;

//     return  new Promise( (resolve, reject) =>{
//         if(bucket2.includes("vegetables") && bucket2.includes("salt") && bucket2.includes("rice") )
//         {
//             resolve("Fried Rice");
//         }
//         else reject("Something missing from bucket");
//     }) ;
// }

// // // // ricePromises.then(    // we can't use it because 
// // ricePromises is a function so we have to required to call it

// ricePromises().then(
//     // // //  when promise will be resolve
//     (myfriedRice)=>{
//         console.log("lets Eat", myfriedRice) ;
//     }).catch( 
//     // // //  when promise will be reject
//     (error)=>{ 
//         console.log(error) ;
// } );
 
//  the above code will print "lets Eat Fried Rice"


 


 
 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// // // //  promises and setTimeout  ====>
// // // //  promises and setTimeout  ====>
// // // //  promises and setTimeout  ====>
// // // //  promises and setTimeout  ====>

 
// function myPromises()
// {
//     // const bucket2 = ['coffee', 'chips','vegetables','salt','rice'] ;
//     return  new Promise( (resolve, reject) =>{
//         const value = true ;
//         // const value = false ;
//         setTimeout( ()=>{
//             if(value) resolve();
//             else reject();
//         }, 2000)
//     }) ;
// }
// myPromises()
//     .then( ()=> { console.log("resolved")})
//     .catch( ()=> { console.log("rejected")})
    
// if value is true so after 2 seconds , resolved will be print
// if value is false so after 2 seconds , rejected will be print
 
 
 
 

 
 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// // // //  Promise.resolve() and Promise.chaining()   ======>
//
//
//
// //  Promise.resolve() ==>
//
// it take any value let say value is 5  and return a promise 
// which will be resolved and have value 5


const  myPromise = Promise.resolve(10) ;
myPromise.then( value=>{
    console.log(value) ;
})





































